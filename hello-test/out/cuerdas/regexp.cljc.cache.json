["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$XRegExp",["^ "],"~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$regexp?"]],"~:name","~$cuerdas.regexp","~:imports",null,"~:requires",["^ ","~$cuerdas.vendor.xregexp","^=","~$gstr","~$goog.string","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$xregexp",["^ ","~:meta",["^ ","~:file","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\regexp.cljc","~:line",33,"~:column",19,"~:end-line",33,"~:end-column",26,"~:private",true],"^J",true,"^9","~$cuerdas.regexp/xregexp","^E","out\\cuerdas\\regexp.cljc","^I",26,"^G",4,"^F",33,"^H",33,"~:tag","~$js"],"^8",["^ ","~:protocol-inline",null,"^D",["^ ","^E","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\regexp.cljc","^F",35,"^G",7,"^H",35,"^I",14,"~:arglists",["~#list",["~$quote",["^P",[["~$x"]]]]],"~:doc","Return `true` if `x` is a regexp pattern\n  instance."],"^9","~$cuerdas.regexp/regexp?","^E","out\\cuerdas\\regexp.cljc","^I",14,"~:method-params",["^P",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^G",1,"~:variadic?",false,"^F",35,"~:ret-tag","~$boolean","^H",35,"~:max-fixed-arity",1,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["~$x"]]]]],"^R","Return `true` if `x` is a regexp pattern\n  instance."],"~$enhace",["^ ","^N",null,"^D",["^ ","^E","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\regexp.cljc","^F",42,"^G",7,"^H",42,"^I",13,"^O",["^P",["^Q",["^P",[["~$re"]]]]],"^R","Enhace the regexp instance with unicode support. This is noop\n  in JVM because it already works perfectly with unicode."],"^9","~$cuerdas.regexp/enhace","^E","out\\cuerdas\\regexp.cljc","^I",13,"^T",["^P",[["^11"]]],"^U",null,"^V",["^P",[null,null]],"^G",1,"^W",false,"^F",42,"^X","~$any","^H",42,"^Z",1,"^[",true,"^O",["^P",["^Q",["^P",[["^11"]]]]],"^R","Enhace the regexp instance with unicode support. This is noop\n  in JVM because it already works perfectly with unicode."],"~$escape",["^ ","^N",null,"^D",["^ ","^E","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\regexp.cljc","^F",50,"^G",7,"^H",50,"^I",13,"^O",["^P",["^Q",["^P",[["~$s"]]]]],"^R","Escapes characters in the string that are not safe\n   to use in a RegExp."],"^9","~$cuerdas.regexp/escape","^E","out\\cuerdas\\regexp.cljc","^I",13,"^T",["^P",[["~$s"]]],"^U",null,"^V",["^P",[null,null]],"^G",1,"^W",false,"^F",50,"^X","^13","^H",50,"^Z",1,"^[",true,"^O",["^P",["^Q",["^P",[["~$s"]]]]],"^R","Escapes characters in the string that are not safe\n   to use in a RegExp."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^R","A regexp helpers and enhancements (mostly for cljs)."]