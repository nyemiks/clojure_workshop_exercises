["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$RegExp",["^ "],"~$NaN",["^ "],"~$parseFloat",["^ "],"~$parseInt",["^ "]],"~:use-macros",["^ ","~$map-invert","~$clojure.set","~$stringify-keys","~$clojure.walk"],"~:excludes",["~#set",["~$contains?","~$reverse","~$empty?","~$replace","~$keyword","~$chars","~$regexp?","~$repeat"]],"~:name","~$cuerdas.core","~:imports",null,"~:requires",["^ ","~$goog.string","^K","~$rx","~$cuerdas.regexp","^:","^:","~$str","~$clojure.string","^O","^O","~$cljs.reader","^P","^<","^<","~$gstr","^K","~$edn","^P","^M","^M"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^9","^:","^;","^<"],"~:defs",["^ ","~$lstrip",["^ ","^G","~$cuerdas.core/lstrip","~:file","out\\cuerdas\\core.cljc","~:line",281,"~:column",1,"~:end-line",281,"~:end-column",12,"~:meta",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",281,"^Z",6,"^[",281,"^10",12]],"~$alnum?",["^ ","~:protocol-inline",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",211,"^Z",7,"^[",211,"^10",13,"~:arglists",["~#list",["~$quote",["^15",[["~$s"]]]]],"~:doc","Checks if a string contains only alphanumeric characters."],"^G","~$cuerdas.core/alnum?","^X","out\\cuerdas\\core.cljc","^10",13,"~:method-params",["^15",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^Z",1,"~:variadic?",false,"^Y",211,"~:ret-tag",["^>",["~$boolean","~$clj-nil"]],"^[",211,"~:max-fixed-arity",1,"~:fn-var",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string contains only alphanumeric characters."],"~$titleize",["^ ","^G","~$cuerdas.core/titleize","^X","out\\cuerdas\\core.cljc","^Y",907,"^Z",1,"^[",907,"^10",27,"~:deprecated",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",907,"^Z",19,"^[",907,"^10",27,"^1D",true]],"~$ends-with?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",100,"^Z",7,"^[",100,"^10",17,"^14",["^15",["^16",["^15",[["~$s","~$suffix"]]]]],"^17","Check if the string ends with suffix."],"^G","~$cuerdas.core/ends-with?","^X","out\\cuerdas\\core.cljc","^10",17,"^19",["^15",[["~$s","^1F"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",100,"^1=",["^>",["^1>","^1?"]],"^[",100,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^1F"]]]]],"^17","Check if the string ends with suffix."],"^?",["^ ","^G","~$cuerdas.core/contains?","^X","out\\cuerdas\\core.cljc","^Y",912,"^Z",1,"^[",912,"^10",28,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",912,"^Z",19,"^[",912,"^10",28,"^1D",true]],"~$collapse-whitespace",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",710,"^Z",7,"^[",710,"^10",26,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts all adjacent whitespace characters\n  to a single space."],"^G","~$cuerdas.core/collapse-whitespace","^X","out\\cuerdas\\core.cljc","^10",26,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",710,"^1=",["^>",["~$any","^1?"]],"^[",710,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts all adjacent whitespace characters\n  to a single space."],"~$js-selector",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",591,"^Z",7,"^[",591,"^10",18,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be either:\n     (js-selector \"-pascal-case-me\") ;; => PascalCaseMe\n     (js-selector \"camel-case-me\") ;; => camelCaseMe\n\n  accepts keywords and strings, with any standard delimiter"],"^G","~$cuerdas.core/js-selector","^X","out\\cuerdas\\core.cljc","^10",18,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",591,"^1=",["^>",["^1K","^1?"]],"^[",591,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be either:\n     (js-selector \"-pascal-case-me\") ;; => PascalCaseMe\n     (js-selector \"camel-case-me\") ;; => camelCaseMe\n\n  accepts keywords and strings, with any standard delimiter"],"~$<<-",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",782,"^Z",7,"^[",782,"^10",10,"^14",["^15",["^16",["^15",[["~$s"],["~$r","~$s"]]]]],"^17","Unindent multiline text.\n  Uses either a supplied regex or the shortest\n  beginning-of-line to non-whitespace distance","~:top-fn",["^ ","^1<",false,"~:fixed-arity",2,"^1@",2,"^19",["^15",[["~$s"],["~$r","~$s"]]],"^14",["^15",[["~$s"],["~$r","~$s"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/<<-","^X","out\\cuerdas\\core.cljc","^10",10,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$r","~$s"]]],"^14",["^15",[["~$s"],["~$r","~$s"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s"],["~$r","~$s"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"~:methods",[["^ ","^1P",1,"^1<",false,"~:tag","^1K"],["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",782,"^[",782,"^1@",2,"^1A",true,"^14",["^15",[["~$s"],["~$r","~$s"]]],"^17","Unindent multiline text.\n  Uses either a supplied regex or the shortest\n  beginning-of-line to non-whitespace distance"],"~$capitalize",["^ ","^G","~$cuerdas.core/capitalize","^X","out\\cuerdas\\core.cljc","^Y",908,"^Z",1,"^[",908,"^10",29,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",908,"^Z",19,"^[",908,"^10",29,"^1D",true]],"^@",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",403,"^Z",7,"^[",403,"^10",14,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Return string reversed."],"^G","~$cuerdas.core/reverse","^X","out\\cuerdas\\core.cljc","^10",14,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",403,"^1=",["^>",["^1K","^1?"]],"^[",403,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Return string reversed."],"~$join",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",477,"^Z",7,"^[",477,"^10",11,"^14",["^15",["^16",["^15",[["~$coll"],["~$separator","^1X"]]]]],"^17","Joins strings together with given separator.","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["^1X"],["^1Y","^1X"]]],"^14",["^15",[["^1X"],["^1Y","^1X"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/join","^X","out\\cuerdas\\core.cljc","^10",11,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["^1X"],["^1Y","^1X"]]],"^14",["^15",[["^1X"],["^1Y","^1X"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["^1X"],["^1Y","^1X"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S","^1K"],["^ ","^1P",2,"^1<",false,"^1S","^1K"]],"^Y",477,"^[",477,"^1@",2,"^1A",true,"^14",["^15",[["^1X"],["^1Y","^1X"]]],"^17","Joins strings together with given separator."],"~$numeric?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",231,"^Z",7,"^[",231,"^10",15,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Check if a string contains only numeric values."],"^G","~$cuerdas.core/numeric?","^X","out\\cuerdas\\core.cljc","^10",15,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",231,"^1=",["^>",["^1>","^1?"]],"^[",231,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Check if a string contains only numeric values."],"~$replace-first",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",351,"^Z",7,"^[",351,"^10",20,"^14",["^15",["^16",["^15",[["~$s","~$match","~$replacement"]]]]],"^17","Replaces first instance of match with replacement in s."],"^G","~$cuerdas.core/replace-first","^X","out\\cuerdas\\core.cljc","^10",20,"^19",["^15",[["~$s","^22","^23"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",351,"^1=",["^>",["^1K","^1?"]],"^[",351,"^1@",3,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^22","^23"]]]]],"^17","Replaces first instance of match with replacement in s."],"~$clean",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",272,"^Z",7,"^[",272,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Trim and replace multiple spaces with\n  a single space."],"^G","~$cuerdas.core/clean","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",272,"^1=","^1K","^[",272,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Trim and replace multiple spaces with\n  a single space."],"~$rtrim",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",250,"^Z",7,"^[",250,"^10",12,"^14",["^15",["^16",["^15",[["~$s"],["~$s","~$chs"]]]]],"^17","Removes whitespace or specified characters\n  from right side of string.","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^28"]]],"^14",["^15",[["~$s"],["~$s","^28"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/rtrim","^X","out\\cuerdas\\core.cljc","^10",12,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^28"]]],"^14",["^15",[["~$s"],["~$s","^28"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s"],["~$s","^28"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S","^1K"],["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",250,"^[",250,"^1@",2,"^1A",true,"^14",["^15",[["~$s"],["~$s","^28"]]],"^17","Removes whitespace or specified characters\n  from right side of string."],"~$startswith?",["^ ","^G","~$cuerdas.core/startswith?","^X","out\\cuerdas\\core.cljc","^Y",913,"^Z",1,"^[",913,"^10",30,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",913,"^Z",19,"^[",913,"^10",30,"^1D",true]],"~$caseless=",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",167,"^Z",7,"^[",167,"^10",16,"^14",["^15",["^16",["^15",[["~$s1","~$s2"]]]]],"^17","Compare strings in a case-insensitive manner.\n\n  This function is locale independent."],"^G","~$cuerdas.core/caseless=","^X","out\\cuerdas\\core.cljc","^10",16,"^19",["^15",[["^2=","^2>"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",167,"^1=",["^>",["^1>","^1?"]],"^[",167,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["^2=","^2>"]]]]],"^17","Compare strings in a case-insensitive manner.\n\n  This function is locale independent."],"~$letters?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",224,"^Z",7,"^[",224,"^10",15,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if string contains only letters.\n  This function will use all the unicode range."],"^G","~$cuerdas.core/letters?","^X","out\\cuerdas\\core.cljc","^10",15,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",224,"^1=",["^>",["^1>","^1?"]],"^[",224,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if string contains only letters.\n  This function will use all the unicode range."],"~$starts-with?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",87,"^Z",7,"^[",87,"^10",19,"^14",["^15",["^16",["^15",[["~$s","~$prefix"]]]]],"^17","Check if the string starts with prefix."],"^G","~$cuerdas.core/starts-with?","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s","^2C"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",87,"^1=",["^>",["^1>","^1?"]],"^[",87,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^2C"]]]]],"^17","Check if the string starts with prefix."],"~$replace-all",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",308,"^Z",11,"^[",308,"^10",22,"~:private",true,"^14",["^15",["^16",["^15",[["~$s","~$re","^23"]]]]]],"^2F",true,"^G","~$cuerdas.core/replace-all","^X","out\\cuerdas\\core.cljc","^10",22,"^19",["^15",[["~$s","^2G","^23"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",4,"^1<",false,"^Y",308,"^1=","^1K","^[",308,"^1@",3,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^2G","^23"]]]]]],"~$rstrip",["^ ","^G","~$cuerdas.core/rstrip","^X","out\\cuerdas\\core.cljc","^Y",280,"^Z",1,"^[",280,"^10",12,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",280,"^Z",6,"^[",280,"^10",12]],"~$upper",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",126,"^Z",7,"^[",126,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts string to all upper-case.\n\n  This function works in strictly locale independent way,\n  if you want a localized version, just use `locale-upper`"],"^G","~$cuerdas.core/upper","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",126,"^1=",["^>",["^1K","^1?"]],"^[",126,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts string to all upper-case.\n\n  This function works in strictly locale independent way,\n  if you want a localized version, just use `locale-upper`"],"~$slug",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",615,"^Z",7,"^[",615,"^10",11,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Transform text into a URL slug."],"^G","~$cuerdas.core/slug","^X","out\\cuerdas\\core.cljc","^10",11,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",615,"^1=",["^>",["^1K","^1?"]],"^[",615,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Transform text into a URL slug."],"~$classify",["^ ","^G","~$cuerdas.core/classify","^X","out\\cuerdas\\core.cljc","^Y",905,"^Z",1,"^[",905,"^10",27,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",905,"^Z",19,"^[",905,"^10",27,"^1D",true]],"~$format",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",465,"^Z",7,"^[",465,"^10",13,"^14",["^15",["^16",["^15",[["~$s","~$&","~$more"]]]]],"^17","Simple string interpolation.","^1O",["^ ","^1<",true,"^1P",1,"^1@",1,"^19",[["^15",["~$s","^2R"]]],"^14",["^15",[["~$s","~$&","^2R"]]],"^1;",["^15",[null]]]],"^G","~$cuerdas.core/format","^X","out\\cuerdas\\core.cljc","^10",13,"^1O",["^ ","^1<",true,"^1P",1,"^1@",1,"^19",[["^15",["~$s","^2R"]]],"^14",["^15",[["~$s","~$&","^2R"]]],"^1;",["^15",[null]]],"^19",[["^15",["~$s","^2R"]]],"^1:",null,"^1P",1,"^1;",["^15",[null]],"^Z",1,"^1<",true,"^1R",[["^ ","^1P",1,"^1<",true,"^1S",["^>",["^1K","^1?"]]]],"^Y",465,"^1=","^1K","^[",465,"^1@",1,"^1A",true,"^14",["^15",[["~$s","~$&","^2R"]]],"^17","Simple string interpolation."],"~$kebab",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",585,"^Z",7,"^[",585,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: lower-cased-and-separated-with-dashes\n  accepts strings and keywords"],"^G","~$cuerdas.core/kebab","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",585,"^1=","^1K","^[",585,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: lower-cased-and-separated-with-dashes\n  accepts strings and keywords"],"~$word?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",217,"^Z",7,"^[",217,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string contains only the word characters.\n  This function will use all the unicode range."],"^G","~$cuerdas.core/word?","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",217,"^1=",["^>",["^1>","^1?"]],"^[",217,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string contains only the word characters.\n  This function will use all the unicode range."],"~$ltrim",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",261,"^Z",7,"^[",261,"^10",12,"^14",["^15",["^16",["^15",[["~$s"],["~$s","^28"]]]]],"^17","Removes whitespace or specified characters\n  from left side of string.","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^28"]]],"^14",["^15",[["~$s"],["~$s","^28"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/ltrim","^X","out\\cuerdas\\core.cljc","^10",12,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^28"]]],"^14",["^15",[["~$s"],["~$s","^28"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s"],["~$s","^28"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S","^1K"],["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",261,"^[",261,"^1@",2,"^1A",true,"^14",["^15",[["~$s"],["~$s","^28"]]],"^17","Removes whitespace or specified characters\n  from left side of string."],"~$fmt",["^ ","^G","~$cuerdas.core/fmt","^X","out\\cuerdas\\core.cljc","^Y",473,"^Z",1,"^[",473,"^10",9,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",473,"^Z",6,"^[",473,"^10",9],"^17","A shorter alias to `format` function."],"~$pascal",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",579,"^Z",7,"^[",579,"^10",13,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: CapitalizedAndTouchingTheNext\n  accepts strings and keywords"],"^G","~$cuerdas.core/pascal","^X","out\\cuerdas\\core.cljc","^10",13,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",579,"^1=","^1K","^[",579,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: CapitalizedAndTouchingTheNext\n  accepts strings and keywords"],"~$includes?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",53,"^Z",7,"^[",53,"^10",16,"^14",["^15",["^16",["^15",[["~$s","~$subs"]]]]],"^17","Determines whether a string contains a substring."],"^G","~$cuerdas.core/includes?","^X","out\\cuerdas\\core.cljc","^10",16,"^19",["^15",[["~$s","^33"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",53,"^1=",["^>",["^1>","^1K","^1?"]],"^[",53,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^33"]]]]],"^17","Determines whether a string contains a substring."],"~$locale-lower",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",135,"^Z",7,"^[",135,"^10",19,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts string to all lower-case respecting\n  the current system locale.\n\n  In the jvm you can provide a concrete locale to\n  use as the second optional argument."],"^G","~$cuerdas.core/locale-lower","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",135,"^1=",["^>",["^1K","^1?"]],"^[",135,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts string to all lower-case respecting\n  the current system locale.\n\n  In the jvm you can provide a concrete locale to\n  use as the second optional argument."],"^A",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",41,"^Z",7,"^[",41,"^10",13,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string is empty."],"^G","~$cuerdas.core/empty?","^X","out\\cuerdas\\core.cljc","^10",13,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",41,"^1=",["^>",["^1>","^1?"]],"^[",41,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string is empty."],"~$alpha?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",199,"^Z",7,"^[",199,"^10",13,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string contains only alpha characters."],"^G","~$cuerdas.core/alpha?","^X","out\\cuerdas\\core.cljc","^10",13,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",199,"^1=",["^>",["^1>","^1?"]],"^[",199,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string contains only alpha characters."],"~$uslug",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",623,"^Z",7,"^[",623,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Unicode friendly version of `slug` function."],"^G","~$cuerdas.core/uslug","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",623,"^1=",["^>",["^1K","^1?"]],"^[",623,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Unicode friendly version of `slug` function."],"~$locale-caseless=",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",176,"^Z",7,"^[",176,"^10",23,"^14",["^15",["^16",["^15",[["^2=","^2>"]]]]],"^17","Compare strings in a case-insensitive manner\n  respecting the current locale.\n\n  An optional locale can be passed as third\n  argument (only on JVM)."],"^G","~$cuerdas.core/locale-caseless=","^X","out\\cuerdas\\core.cljc","^10",23,"^19",["^15",[["^2=","^2>"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",176,"^1=",["^>",["^1>","^1?"]],"^[",176,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["^2=","^2>"]]]]],"^17","Compare strings in a case-insensitive manner\n  respecting the current locale.\n\n  An optional locale can be passed as third\n  argument (only on JVM)."],"^B",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",329,"^Z",7,"^[",329,"^10",14,"^14",["^15",["^16",["^15",[["~$s","^22","^23"]]]]],"^17","Replaces all instance of match with replacement in s.\n\n  The replacement is literal (i.e. none of its characters are treated\n  specially) for all cases above except pattern / string.\n\n  In match is pattern instance, replacement can contain $1, $2, etc.\n  will be substituted with string that matcher the corresponding\n  parenthesized group in pattern.\n\n  If you wish your replacement string to be used literary,\n  use `(cuerdas.regexp/escape replacement)`.\n\n  Example:\n    (replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n    ;; => \"lmostAay igPay atinLay\"\n  "],"^G","~$cuerdas.core/replace","^X","out\\cuerdas\\core.cljc","^10",14,"^19",["^15",[["~$s","^22","^23"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",329,"^1=",["^>",["^1K","^1?"]],"^[",329,"^1@",3,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^22","^23"]]]]],"^17","Replaces all instance of match with replacement in s.\n\n  The replacement is literal (i.e. none of its characters are treated\n  specially) for all cases above except pattern / string.\n\n  In match is pattern instance, replacement can contain $1, $2, etc.\n  will be substituted with string that matcher the corresponding\n  parenthesized group in pattern.\n\n  If you wish your replacement string to be used literary,\n  use `(cuerdas.regexp/escape replacement)`.\n\n  Example:\n    (replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n    ;; => \"lmostAay igPay atinLay\"\n  "],"~$empty-or-nil?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",47,"^Z",7,"^[",47,"^10",20,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Convenient helper for check emptines or if value is nil."],"^G","~$cuerdas.core/empty-or-nil?","^X","out\\cuerdas\\core.cljc","^10",20,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",47,"^1=",["^>",["^1>","^1?"]],"^[",47,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Convenient helper for check emptines or if value is nil."],"~$snake",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",555,"^Z",7,"^[",555,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: lower_cased_and_underscore_separated\n  accepts strings and keywords"],"^G","~$cuerdas.core/snake","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",555,"^1=","^1K","^[",555,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: lower_cased_and_underscore_separated\n  accepts strings and keywords"],"~$slugify",["^ ","^G","~$cuerdas.core/slugify","^X","out\\cuerdas\\core.cljc","^Y",901,"^Z",1,"^[",901,"^10",26,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",901,"^Z",19,"^[",901,"^10",26,"^1D",true]],"~$humanize",["^ ","^G","~$cuerdas.core/humanize","^X","out\\cuerdas\\core.cljc","^Y",906,"^Z",1,"^[",906,"^10",27,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",906,"^Z",19,"^[",906,"^10",27,"^1D",true]],"~$underscored",["^ ","^G","~$cuerdas.core/underscored","^X","out\\cuerdas\\core.cljc","^Y",904,"^Z",1,"^[",904,"^10",30,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",904,"^Z",19,"^[",904,"^10",30,"^1D",true]],"~$dasherize",["^ ","^G","~$cuerdas.core/dasherize","^X","out\\cuerdas\\core.cljc","^Y",902,"^Z",1,"^[",902,"^10",28,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",902,"^Z",19,"^[",902,"^10",28,"^1D",true]],"~$unquote",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",508,"^Z",7,"^[",508,"^10",14,"^14",["^15",["^16",["^15",[["~$s"],["~$s","~$qchar"]]]]],"^17","Unquote a string.","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^3L"]]],"^14",["^15",[["~$s"],["~$s","^3L"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/unquote","^X","out\\cuerdas\\core.cljc","^10",14,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^3L"]]],"^14",["^15",[["~$s"],["~$s","^3L"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s"],["~$s","^3L"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S",["^>",[null,"^1K","^1?"]]],["^ ","^1P",2,"^1<",false,"^1S",["^>",[null,"^1K","^1?"]]]],"^Y",508,"^[",508,"^1@",2,"^1A",true,"^14",["^15",[["~$s"],["~$s","^3L"]]],"^17","Unquote a string."],"~$parse-float",["^ ","^G","~$cuerdas.core/parse-float","^X","out\\cuerdas\\core.cljc","^Y",911,"^Z",1,"^[",911,"^10",30,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",911,"^Z",19,"^[",911,"^10",30,"^1D",true]],"~$capital",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",542,"^Z",7,"^[",542,"^10",14,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Uppercases the first character of a string"],"^G","~$cuerdas.core/capital","^X","out\\cuerdas\\core.cljc","^10",14,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",542,"^1=",["^>",[null,"~$string"]],"^[",542,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Uppercases the first character of a string"],"~$words",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",427,"^Z",7,"^[",427,"^10",12,"^14",["^15",["^16",["^15",[["~$s"],["~$s","^2G"]]]]],"^17","Returns a vector of the words in the string.","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^2G"]]],"^14",["^15",[["~$s"],["~$s","^2G"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/words","^X","out\\cuerdas\\core.cljc","^10",12,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^2G"]]],"^14",["^15",[["~$s"],["~$s","^2G"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s"],["~$s","^2G"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S","^1K"],["^ ","^1P",2,"^1<",false,"^1S",["^>",["~$clj","~$cljs.core/IVector","^1K","~$cljs.core/MetaFn","^1?"]]]],"^Y",427,"^[",427,"^1@",2,"^1A",true,"^14",["^15",[["~$s"],["~$s","^2G"]]],"^17","Returns a vector of the words in the string."],"~$parse-double",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",649,"^Z",7,"^[",649,"^10",19,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Return the double value from string."],"^G","~$cuerdas.core/parse-double","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",649,"^1=",["^>",["~$js","~$number"]],"^[",649,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Return the double value from string."],"~$digits?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",205,"^Z",7,"^[",205,"^10",14,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string contains only digit characters."],"^G","~$cuerdas.core/digits?","^X","out\\cuerdas\\core.cljc","^10",14,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",205,"^1=",["^>",["^1>","^1?"]],"^[",205,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string contains only digit characters."],"~$+slug-tr-map+",["^ ","^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",611,"^Z",16,"^[",611,"^10",29,"^2F",true],"^2F",true,"^G","~$cuerdas.core/+slug-tr-map+","^X","out\\cuerdas\\core.cljc","^10",29,"^Z",1,"^Y",611,"^[",611,"^1S","^3U"],"~$unlines",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",421,"^Z",7,"^[",421,"^10",14,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Returns a new string joining a list of strings with a newline char (\\n)."],"^G","~$cuerdas.core/unlines","^X","out\\cuerdas\\core.cljc","^10",14,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",421,"^1=",["^>",["^1K","^1?"]],"^[",421,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Returns a new string joining a list of strings with a newline char (\\n)."],"~$human",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",567,"^Z",7,"^[",567,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: lower cased and space separated\n  accepts strings and keywords"],"^G","~$cuerdas.core/human","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",567,"^1=","^1K","^[",567,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: lower cased and space separated\n  accepts strings and keywords"],"~$substr-between",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",766,"^Z",7,"^[",766,"^10",21,"^14",["^15",["^16",["^15",[["~$s","^2C","^1F"]]]]],"^17","Find string that is nested in between two strings. Return first match"],"^G","~$cuerdas.core/substr-between","^X","out\\cuerdas\\core.cljc","^10",21,"^19",["^15",[["~$s","^2C","^1F"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",766,"^1=",["^>",["^1K","^1?"]],"^[",766,"^1@",3,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^2C","^1F"]]]]],"^17","Find string that is nested in between two strings. Return first match"],"~$replace*",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",318,"^Z",11,"^[",318,"^10",19,"^2F",true,"^14",["^15",["^16",["^15",[["~$s","^22","^23"]]]]]],"^2F",true,"^G","~$cuerdas.core/replace*","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s","^22","^23"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",4,"^1<",false,"^Y",318,"^1=",["^>",["^1K","^1?"]],"^[",318,"^1@",3,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^22","^23"]]]]]],"~$lines",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",416,"^Z",7,"^[",416,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Return a list of the lines in the string."],"^G","~$cuerdas.core/lines","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",416,"^1=",["^>",["^1K","^1?"]],"^[",416,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Return a list of the lines in the string."],"~$keyword*",["^ ","^G","~$cuerdas.core/keyword*","^X","out\\cuerdas\\core.cljc","^Y",38,"^Z",10,"^[",38,"^10",33,"^2F",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",38,"^Z",25,"^[",38,"^10",33,"^2F",true]],"~$to-bool",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",687,"^Z",7,"^[",687,"^10",14,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Returns true for 1/on/true/yes string values (case-insensitive),\n  false otherwise."],"^G","~$cuerdas.core/to-bool","^X","out\\cuerdas\\core.cljc","^10",14,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",687,"^1=","^1>","^[",687,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Returns true for 1/on/true/yes string values (case-insensitive),\n  false otherwise."],"~$strip-tags-impl",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",738,"^Z",8,"^[",738,"^10",23,"^2F",true,"^14",["^15",["^16",["^15",[["~$s","~$tags","~$mappings"]]]]]],"^2F",true,"^G","~$cuerdas.core/strip-tags-impl","^X","out\\cuerdas\\core.cljc","^10",23,"^19",["^15",[["~$s","^4C","^4D"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",738,"^1=",["^>",["^1K","^1?"]],"^[",738,"^1@",3,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^4C","^4D"]]]]]],"~$strip-suffix",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",290,"^Z",7,"^[",290,"^10",19,"^14",["^15",["^16",["^15",[["~$s","^1F"]]]]],"^17","Strip suffix in more efficient way."],"^G","~$cuerdas.core/strip-suffix","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s","^1F"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",290,"^1=",["^>",["~$String","^1K","^1?"]],"^[",290,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^1F"]]]]],"^17","Strip suffix in more efficient way."],"~$indexed-format",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",448,"^Z",11,"^[",448,"^10",25,"^2F",true,"^14",["^15",["^16",["^15",[["~$s","~$params"]]]]]],"^2F",true,"^G","~$cuerdas.core/indexed-format","^X","out\\cuerdas\\core.cljc","^10",25,"^19",["^15",[["~$s","^4J"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",4,"^1<",false,"^Y",448,"^1=",["^>",["^1K","^1?"]],"^[",448,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^4J"]]]]]],"~$strip-prefix",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",283,"^Z",7,"^[",283,"^10",19,"^14",["^15",["^16",["^15",[["~$s","^2C"]]]]],"^17","Strip prefix in more efficient way."],"^G","~$cuerdas.core/strip-prefix","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s","^2C"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",283,"^1=",["^>",["^4H","^1K","^1?"]],"^[",283,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^2C"]]]]],"^17","Strip prefix in more efficient way."],"~$title",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",573,"^Z",7,"^[",573,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: Each Word Capitalized And Separated With Spaces\n  accepts strings and keywords"],"^G","~$cuerdas.core/title","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",573,"^1=","^1K","^[",573,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: Each Word Capitalized And Separated With Spaces\n  accepts strings and keywords"],"~$unsurround",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",490,"^Z",7,"^[",490,"^10",17,"^14",["^15",["^16",["^15",[["~$s","~$surrounding"]]]]],"^17","Unsurround a string surrounded by another string or character."],"^G","~$cuerdas.core/unsurround","^X","out\\cuerdas\\core.cljc","^10",17,"^19",["^15",[["~$s","^4Q"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",490,"^1=",["^>",[null,"^1K","^1?"]],"^[",490,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^4Q"]]]]],"^17","Unsurround a string surrounded by another string or character."],"~$interpolate-format",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",435,"^Z",8,"^[",435,"^10",26,"^2F",true,"^14",["^15",["^16",["^15",[["~$s","^4J"]]]]]],"^2F",true,"^G","~$cuerdas.core/interpolate-format","^X","out\\cuerdas\\core.cljc","^10",26,"^19",["^15",[["~$s","^4J"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",435,"^[",435,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^4J"]]]]]],"~$strip-newlines",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",377,"^Z",7,"^[",377,"^10",21,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Takes a string and replaces newlines with a space.\n  Multiple lines are replaced with a single space."],"^G","~$cuerdas.core/strip-newlines","^X","out\\cuerdas\\core.cljc","^10",21,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",377,"^1=",["^>",["^1K","^1?"]],"^[",377,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Takes a string and replaces newlines with a space.\n  Multiple lines are replaced with a single space."],"~$surround",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",484,"^Z",7,"^[",484,"^10",15,"^14",["^15",["^16",["^15",[["~$s","~$wrap"]]]]],"^17","Surround a string with another string or character."],"^G","~$cuerdas.core/surround","^X","out\\cuerdas\\core.cljc","^10",15,"^19",["^15",[["~$s","^4X"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",484,"^1=",["^>",["^1K","^1?"]],"^[",484,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["~$s","^4X"]]]]],"^17","Surround a string with another string or character."],"~$alpha-numeric?",["^ ","^G","~$cuerdas.core/alpha-numeric?","^X","out\\cuerdas\\core.cljc","^Y",909,"^Z",1,"^[",909,"^10",33,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",909,"^Z",19,"^[",909,"^10",33,"^1D",true]],"~$css-selector",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",601,"^Z",7,"^[",601,"^10",19,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be either:\n     (js-selector \"LeadingDash\") ;; => -leading-dash\n     (js-selector \"noLeadingDash\") ;; => no-leading-dash\n\n  accepts keywords and strings, with any standard delimiter"],"^G","~$cuerdas.core/css-selector","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",601,"^1=",["^>",["^1K","^1?"]],"^[",601,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be either:\n     (js-selector \"LeadingDash\") ;; => -leading-dash\n     (js-selector \"noLeadingDash\") ;; => no-leading-dash\n\n  accepts keywords and strings, with any standard delimiter"],"~$one-of?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",682,"^Z",7,"^[",682,"^10",14,"^14",["^15",["^16",["^15",[["^1X","~$s"]]]]],"^17","Returns true if s can be found in coll."],"^G","~$cuerdas.core/one-of?","^X","out\\cuerdas\\core.cljc","^10",14,"^19",["^15",[["^1X","~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",682,"^1=","^1>","^[",682,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["^1X","~$s"]]]]],"^17","Returns true if s can be found in coll."],"~$strip-tags",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",756,"^Z",7,"^[",756,"^10",17,"^14",["^15",["^16",["^15",[["~$s"],["~$s","^4C"],["~$s","^4C","~$mapping"]]]]],"^17","Remove html tags from string.","^1O",["^ ","^1<",false,"^1P",3,"^1@",3,"^19",["^15",[["~$s"],["~$s","^4C"],["~$s","^4C","^55"]]],"^14",["^15",[["~$s"],["~$s","^4C"],["~$s","^4C","^55"]]],"^1;",["^15",[null,null,null]]]],"^G","~$cuerdas.core/strip-tags","^X","out\\cuerdas\\core.cljc","^10",17,"^1O",["^ ","^1<",false,"^1P",3,"^1@",3,"^19",["^15",[["~$s"],["~$s","^4C"],["~$s","^4C","^55"]]],"^14",["^15",[["~$s"],["~$s","^4C"],["~$s","^4C","^55"]]],"^1;",["^15",[null,null,null]]],"^19",["^15",[["~$s"],["~$s","^4C"],["~$s","^4C","^55"]]],"^1:",null,"^1P",3,"^1;",["^15",[null,null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S",["^>",["^1K","^1?"]]],["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]],["^ ","^1P",3,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",756,"^[",756,"^1@",3,"^1A",true,"^14",["^15",[["~$s"],["~$s","^4C"],["~$s","^4C","^55"]]],"^17","Remove html tags from string."],"~$split",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",383,"^Z",7,"^[",383,"^10",12,"^14",["^15",["^16",["^15",[["~$s"],["~$s","~$sep"],["~$s","^58","~$num"]]]]],"^17","Splits a string on a separator a limited\n  number of times. The separator can be a string,\n  character or Pattern (clj) / RegExp (cljs) instance.","^1O",["^ ","^1<",false,"^1P",3,"^1@",3,"^19",["^15",[["~$s"],["~$s","^58"],["~$s","^58","^59"]]],"^14",["^15",[["~$s"],["~$s","^58"],["~$s","^58","^59"]]],"^1;",["^15",[null,null,null]]]],"^G","~$cuerdas.core/split","^X","out\\cuerdas\\core.cljc","^10",12,"^1O",["^ ","^1<",false,"^1P",3,"^1@",3,"^19",["^15",[["~$s"],["~$s","^58"],["~$s","^58","^59"]]],"^14",["^15",[["~$s"],["~$s","^58"],["~$s","^58","^59"]]],"^1;",["^15",[null,null,null]]],"^19",["^15",[["~$s"],["~$s","^58"],["~$s","^58","^59"]]],"^1:",null,"^1P",3,"^1;",["^15",[null,null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S","^1K"],["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]],["^ ","^1P",3,"^1<",false,"^1S",["^>",[null,"^1K","^1?"]]]],"^Y",383,"^[",383,"^1@",3,"^1A",true,"^14",["^15",[["~$s"],["~$s","^58"],["~$s","^58","^59"]]],"^17","Splits a string on a separator a limited\n  number of times. The separator can be a string,\n  character or Pattern (clj) / RegExp (cljs) instance."],"~$locale-upper",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",151,"^Z",7,"^[",151,"^10",19,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts string to all upper-case respecting\n  the current system locale.\n\n  In the jvm you can provide a concrete locale to\n  use as the second optional argument."],"^G","~$cuerdas.core/locale-upper","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",151,"^1=",["^>",["^1K","^1?"]],"^[",151,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts string to all upper-case respecting\n  the current system locale.\n\n  In the jvm you can provide a concrete locale to\n  use as the second optional argument."],"^16",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",503,"^Z",7,"^[",503,"^10",12,"^14",["^15",["^16",["^15",[["~$s"],["~$s","^3L"]]]]],"^17","Quotes a string.","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^3L"]]],"^14",["^15",[["~$s"],["~$s","^3L"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/quote","^X","out\\cuerdas\\core.cljc","^10",12,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^3L"]]],"^14",["^15",[["~$s"],["~$s","^3L"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s"],["~$s","^3L"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S",["^>",["^1K","^1?"]]],["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",503,"^[",503,"^1@",2,"^1A",true,"^14",["^15",[["~$s"],["~$s","^3L"]]],"^17","Quotes a string."],"^C",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",630,"^Z",7,"^[",630,"^10",14,"^14",["^15",["^16",["^15",[["~$k"],["~$n","~$k"]]]]],"^17","Safer version of clojure keyword, accepting a\n  symbol for the namespace and kebab-casing the key","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$k"],["~$n","~$k"]]],"^14",["^15",[["~$k"],["~$n","~$k"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/keyword","^X","out\\cuerdas\\core.cljc","^10",14,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$k"],["~$n","~$k"]]],"^14",["^15",[["~$k"],["~$n","~$k"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$k"],["~$n","~$k"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S","^1K"],["^ ","^1P",2,"^1<",false,"^1S","^1K"]],"^Y",630,"^[",630,"^1@",2,"^1A",true,"^14",["^15",[["~$k"],["~$n","~$k"]]],"^17","Safer version of clojure keyword, accepting a\n  symbol for the namespace and kebab-casing the key"],"~$phrase",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",561,"^Z",7,"^[",561,"^10",13,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: Space separated with the first letter capitalized.\n  accepts strings and keywords"],"^G","~$cuerdas.core/phrase","^X","out\\cuerdas\\core.cljc","^10",13,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",561,"^1=",["^>",["^1K","^1?"]],"^[",561,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: Space separated with the first letter capitalized.\n  accepts strings and keywords"],"^D",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",409,"^Z",7,"^[",409,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Split a string in a seq of chars."],"^G","~$cuerdas.core/chars","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",409,"^1=",["^>",["^1K","^1?"]],"^[",409,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Split a string in a seq of chars."],"~$pad",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",693,"^Z",7,"^[",693,"^10",10,"^14",["^15",["^16",["^15",[["~$s","~$&",[["^ ","~:keys",["~$length","~$padding","~$type"],"~:or",["^ ","^5D",0,"^5E"," ","^5F","~:left"]]]]]]]],"^17","Pads the str with characters until the total string\n  length is equal to the passed length parameter. By\n  default, pads on the left with the space char.","^1O",["^ ","^1<",true,"^1P",1,"^1@",1,"^19",[["^15",["~$s",[["^ ","^5C",["^5D","^5E","^5F"],"^5G",["^ ","^5D",0,"^5E"," ","^5F","^5H"]]]]]],"^14",["^15",[["~$s","~$&",[["^ ","^5C",["^5D","^5E","^5F"],"^5G",["^ ","^5D",0,"^5E"," ","^5F","^5H"]]]]]],"^1;",["^15",[null]]]],"^G","~$cuerdas.core/pad","^X","out\\cuerdas\\core.cljc","^10",10,"^1O",["^ ","^1<",true,"^1P",1,"^1@",1,"^19",[["^15",["~$s",[["^ ","^5C",["^5D","^5E","^5F"],"^5G",["^ ","^5D",0,"^5E"," ","^5F","^5H"]]]]]],"^14",["^15",[["~$s","~$&",[["^ ","^5C",["^5D","^5E","^5F"],"^5G",["^ ","^5D",0,"^5E"," ","^5F","^5H"]]]]]],"^1;",["^15",[null]]],"^19",[["^15",["~$s",[["^ ","^5C",["^5D","^5E","^5F"],"^5G",["^ ","^5D",0,"^5E"," ","^5F","^5H"]]]]]],"^1:",null,"^1P",1,"^1;",["^15",[null]],"^Z",1,"^1<",true,"^1R",[["^ ","^1P",1,"^1<",true,"^1S",["^>",["^3R","^1?"]]]],"^Y",693,"^1=","^1K","^[",693,"^1@",1,"^1A",true,"^14",["^15",[["~$s","~$&",[["^ ","^5C",["^5D","^5E","^5F"],"^5G",["^ ","^5D",0,"^5E"," ","^5F","^5H"]]]]]],"^17","Pads the str with characters until the total string\n  length is equal to the passed length parameter. By\n  default, pads on the left with the space char."],"~$stylize-split",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",515,"^Z",8,"^[",515,"^10",21,"^2F",true,"^14",["^15",["^16",["^15",[["~$s"]]]]]],"^2F",true,"^G","~$cuerdas.core/stylize-split","^X","out\\cuerdas\\core.cljc","^10",21,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",515,"^1=",["^>",["~$seq","^1?"]],"^[",515,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]]],"~$unescape-html",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",728,"^Z",7,"^[",728,"^10",20,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts entity characters to HTML equivalents."],"^G","~$cuerdas.core/unescape-html","^X","out\\cuerdas\\core.cljc","^10",20,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",728,"^1=",["^>",["^1K","^1?"]],"^[",728,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts entity characters to HTML equivalents."],"~$parse-int",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",666,"^Z",7,"^[",666,"^10",16,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Return the number value in integer form."],"^G","~$cuerdas.core/parse-int","^X","out\\cuerdas\\core.cljc","^10",16,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",666,"^1=",["^>",["^3Z","^3["]],"^[",666,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Return the number value in integer form."],"~$slice",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",78,"^Z",10,"^[",78,"^10",15,"^14",["^15",["^16",["^15",[["~$s","~$begin"],["~$s","^5R","~$end"]]]]],"^17","Extracts a section of a string and returns a new string.","^1O",["^ ","^1<",false,"^1P",3,"^1@",3,"^19",["^15",[["~$s","^5R"],["~$s","^5R","^5S"]]],"^14",["^15",[["~$s","^5R"],["~$s","^5R","^5S"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/slice","^X","out\\cuerdas\\core.cljc","^10",15,"^1O",["^ ","^1<",false,"^1P",3,"^1@",3,"^19",["^15",[["~$s","^5R"],["~$s","^5R","^5S"]]],"^14",["^15",[["~$s","^5R"],["~$s","^5R","^5S"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s","^5R"],["~$s","^5R","^5S"]]],"^1:",null,"^1P",3,"^1;",["^15",[null,null]],"^Z",4,"^1<",false,"^1R",[["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]],["^ ","^1P",3,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",78,"^[",78,"^1@",3,"^1A",true,"^14",["^15",[["~$s","^5R"],["~$s","^5R","^5S"]]],"^17","Extracts a section of a string and returns a new string."],"~$escape-html",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",718,"^Z",7,"^[",718,"^10",18,"^14",["^15",["^16",["^15",[["~$s"]]]]]],"^G","~$cuerdas.core/escape-html","^X","out\\cuerdas\\core.cljc","^10",18,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",718,"^1=",["^>",["^1K","^1?"]],"^[",718,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]]],"~$prune",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",357,"^Z",7,"^[",357,"^10",12,"^14",["^15",["^16",["^15",[["~$s","^59"],["~$s","^59","^33"]]]]],"^17","Truncates a string to a certain length and adds '...'\n  if necessary.","^1O",["^ ","^1<",false,"^1P",3,"^1@",3,"^19",["^15",[["~$s","^59"],["~$s","^59","^33"]]],"^14",["^15",[["~$s","^59"],["~$s","^59","^33"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/prune","^X","out\\cuerdas\\core.cljc","^10",12,"^1O",["^ ","^1<",false,"^1P",3,"^1@",3,"^19",["^15",[["~$s","^59"],["~$s","^59","^33"]]],"^14",["^15",[["~$s","^59"],["~$s","^59","^33"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s","^59"],["~$s","^59","^33"]]],"^1:",null,"^1P",3,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",2,"^1<",false,"^1S","^1K"],["^ ","^1P",3,"^1<",false,"^1S",["^>",[null,"^3R"]]]],"^Y",357,"^[",357,"^1@",3,"^1A",true,"^14",["^15",[["~$s","^59"],["~$s","^59","^33"]]],"^17","Truncates a string to a certain length and adds '...'\n  if necessary."],"~$lower",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",117,"^Z",7,"^[",117,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts string to all lower-case.\n\n  This function works in strictly locale independent way,\n  if you want a localized version, just use `locale-lower`"],"^G","~$cuerdas.core/lower","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",117,"^1=",["^>",["^1K","^1?"]],"^[",117,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Converts string to all lower-case.\n\n  This function works in strictly locale independent way,\n  if you want a localized version, just use `locale-lower`"],"~$endswith?",["^ ","^G","~$cuerdas.core/endswith?","^X","out\\cuerdas\\core.cljc","^Y",914,"^Z",1,"^[",914,"^10",28,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",914,"^Z",19,"^[",914,"^10",28,"^1D",true]],"~$stylize-join",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",525,"^Z",8,"^[",525,"^10",20,"^2F",true,"^14",["^15",["^16",["^15",[["^1X","~$every-fn","~$join-with"],[["~$fst","~$&","~$rst"],"~$first-fn","~$rest-fn","^63"]]]]],"^1O",["^ ","^1<",false,"^1P",4,"^1@",4,"^19",["^15",[["^1X","^62","^63"],[["^64","~$&","^65"],"^66","^67","^63"]]],"^14",["^15",[["^1X","^62","^63"],[["^64","~$&","^65"],"^66","^67","^63"]]],"^1;",["^15",[null,null]]]],"^2F",true,"^G","~$cuerdas.core/stylize-join","^X","out\\cuerdas\\core.cljc","^10",20,"^1O",["^ ","^1<",false,"^1P",4,"^1@",4,"^19",["^15",[["^1X","^62","^63"],[["^64","~$&","^65"],"^66","^67","^63"]]],"^14",["^15",[["^1X","^62","^63"],[["^64","~$&","^65"],"^66","^67","^63"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["^1X","^62","^63"],[["^64","~$&","^65"],"^66","^67","^63"]]],"^1:",null,"^1P",4,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",3,"^1<",false,"^1S",["^>",["^1K","^1?"]]],["^ ","^1P",4,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",525,"^[",525,"^1@",4,"^1A",true,"^14",["^15",[["^1X","^62","^63"],[["^64","~$&","^65"],"^66","^67","^63"]]]],"~$stylize",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",533,"^Z",7,"^[",533,"^10",14,"^14",["^15",["^16",["^15",[["~$s","^62","^63"],["~$s","^66","^67","^63"]]]]],"^1O",["^ ","^1<",false,"^1P",4,"^1@",4,"^19",["^15",[["~$s","^62","^63"],["~$s","^66","^67","^63"]]],"^14",["^15",[["~$s","^62","^63"],["~$s","^66","^67","^63"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/stylize","^X","out\\cuerdas\\core.cljc","^10",14,"^1O",["^ ","^1<",false,"^1P",4,"^1@",4,"^19",["^15",[["~$s","^62","^63"],["~$s","^66","^67","^63"]]],"^14",["^15",[["~$s","^62","^63"],["~$s","^66","^67","^63"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s","^62","^63"],["~$s","^66","^67","^63"]]],"^1:",null,"^1P",4,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",3,"^1<",false,"^1S","^1K"],["^ ","^1P",4,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",533,"^[",533,"^1@",4,"^1A",true,"^14",["^15",[["~$s","^62","^63"],["~$s","^66","^67","^63"]]]],"~$underscore",["^ ","^G","~$cuerdas.core/underscore","^X","out\\cuerdas\\core.cljc","^Y",903,"^Z",1,"^[",903,"^10",29,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",903,"^Z",19,"^[",903,"^10",29,"^1D",true]],"~$trim",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",239,"^Z",7,"^[",239,"^10",11,"^14",["^15",["^16",["^15",[["~$s"],["~$s","^28"]]]]],"^17","Removes whitespace or specified characters\n  from both ends of string.","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^28"]]],"^14",["^15",[["~$s"],["~$s","^28"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/trim","^X","out\\cuerdas\\core.cljc","^10",11,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","^28"]]],"^14",["^15",[["~$s"],["~$s","^28"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s"],["~$s","^28"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S","^1K"],["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",239,"^[",239,"^1@",2,"^1A",true,"^14",["^15",[["~$s"],["~$s","^28"]]],"^17","Removes whitespace or specified characters\n  from both ends of string."],"^F",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",299,"^Z",7,"^[",299,"^10",13,"^14",["^15",["^16",["^15",[["~$s"],["~$s","~$n"]]]]],"^17","Repeats string n times.","^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","~$n"]]],"^14",["^15",[["~$s"],["~$s","~$n"]]],"^1;",["^15",[null,null]]]],"^G","~$cuerdas.core/repeat","^X","out\\cuerdas\\core.cljc","^10",13,"^1O",["^ ","^1<",false,"^1P",2,"^1@",2,"^19",["^15",[["~$s"],["~$s","~$n"]]],"^14",["^15",[["~$s"],["~$s","~$n"]]],"^1;",["^15",[null,null]]],"^19",["^15",[["~$s"],["~$s","~$n"]]],"^1:",null,"^1P",2,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^1R",[["^ ","^1P",1,"^1<",false,"^1S","^1K"],["^ ","^1P",2,"^1<",false,"^1S",["^>",["^1K","^1?"]]]],"^Y",299,"^[",299,"^1@",2,"^1A",true,"^14",["^15",[["~$s"],["~$s","~$n"]]],"^17","Repeats string n times."],"~$parse-long",["^ ","^G","~$cuerdas.core/parse-long","^X","out\\cuerdas\\core.cljc","^Y",910,"^Z",1,"^[",910,"^10",29,"^1D",true,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",910,"^Z",19,"^[",910,"^10",29,"^1D",true]],"~$strip",["^ ","^G","~$cuerdas.core/strip","^X","out\\cuerdas\\core.cljc","^Y",279,"^Z",1,"^[",279,"^10",11,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",279,"^Z",6,"^[",279,"^10",11]],"~$blank?",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",191,"^Z",7,"^[",191,"^10",13,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string is empty or contains only whitespace."],"^G","~$cuerdas.core/blank?","^X","out\\cuerdas\\core.cljc","^10",13,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",191,"^1=",["^>",["^1>","^1?"]],"^[",191,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Checks if a string is empty or contains only whitespace."],"~$camel",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",549,"^Z",7,"^[",549,"^10",12,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: lowerUpperUpperNoSpaces\n  accepts strings and keywords"],"^G","~$cuerdas.core/camel","^X","out\\cuerdas\\core.cljc","^10",12,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",549,"^1=",["^>",["^1K","^1?"]],"^[",549,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","Output will be: lowerUpperUpperNoSpaces\n  accepts strings and keywords"],"~$parse-number",["^ ","^13",null,"^11",["^ ","^X","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\cuerdas\\core.cljc","^Y",638,"^Z",7,"^[",638,"^10",19,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","General purpose function for parse number like\n  string to number. It works with both integers\n  and floats."],"^G","~$cuerdas.core/parse-number","^X","out\\cuerdas\\core.cljc","^10",19,"^19",["^15",[["~$s"]]],"^1:",null,"^1;",["^15",[null,null]],"^Z",1,"^1<",false,"^Y",638,"^1=",["^>",["^1K","^3Z","^1?"]],"^[",638,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^17","General purpose function for parse number like\n  string to number. It works with both integers\n  and floats."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^R","^P","^P","^P"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:sep","~:else","~:type","~:padding","~:length","~:right","~:both","^5H"]],"~:order",["^6O","^6N","^6R","^6Q","^6P","^5H","^6S","^6T"]],"^17",null]