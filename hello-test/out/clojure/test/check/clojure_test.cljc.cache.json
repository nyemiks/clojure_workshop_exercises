["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$defspec","~$clojure.test.check.clojure-test","~$get-current-time-millis","~$clojure.test.check.impl"],"~:excludes",["~#set",[]],"~:name","^6","~:imports",null,"~:requires",["^ ","~$ct","~$cljs.test","^?","^?","~$tc","~$clojure.test.check","^A","^A","~$clojure.test.check.clojure-test.assertions","^B","^8","^8"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^7","^8"],"~:defs",["^ ","~$*default-test-count*",["^ ","~:meta",["^ ","~:file","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","~:line",24,"~:column",16,"~:end-line",24,"~:end-column",36,"~:dynamic",true],"^;","~$clojure.test.check.clojure-test/*default-test-count*","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",36,"^J",1,"^M",true,"^I",24,"^K",24,"~:tag","~$number"],"~$*default-opts*",["^ ","^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",59,"^J",16,"^K",59,"^L",30,"^M",true],"^;","~$clojure.test.check.clojure-test/*default-opts*","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",30,"^J",1,"^M",true,"^I",59,"^K",59,"^O","~$cljs.core/IMap","~:doc","The default options passed to clojure.test.check/quick-check\n  by defspec."],"~$default-reporter-fn",["^ ","~:protocol-inline",null,"^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",26,"^J",7,"^K",26,"^L",26,"~:arglists",["~#list",["~$quote",["^X",[[["^ ","~:keys",["~$type"],"~:as","~$args"]]]]]],"^T","Default function passed as the :reporter-fn to clojure.test.check/quick-check.\n  Delegates to clojure.test/report."],"^;","~$clojure.test.check.clojure-test/default-reporter-fn","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",26,"~:method-params",["^X",[["~$p__4703"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^J",1,"~:variadic?",false,"^I",26,"^K",26,"~:max-fixed-arity",1,"~:fn-var",true,"^W",["^X",["^Y",["^X",[[["^ ","^Z",["^["],"^10","^11"]]]]]],"^T","Default function passed as the :reporter-fn to clojure.test.check/quick-check.\n  Delegates to clojure.test/report."],"^5",["^ ","^V",null,"^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^L",18,"~:top-fn",["^ ","^17",false,"~:fixed-arity",3,"^18",3,"^13",["^X",[["~$name","~$property"],["^1<","~$options","^1="]]],"^W",["^X",[["^1<","^1="],["^1<","^1>","^1="]]],"^16",["^X",[null,null]]],"^J",11,"^I",75,"~:macro",true,"^K",75,"^W",["^X",["^Y",["^X",[["^1<","^1="],["^1<","~$num-tests?","^1="],["^1<","~$options?","^1="]]]]],"^T","Defines a new clojure.test test var that uses `quick-check` to verify the\n  property, running num-times trials by default.  You can call the function defined as `name`\n  with no arguments to trigger this test directly (i.e., without starting a\n  wider clojure.test run).  If called with arguments, the first argument is the number of\n  trials, optionally followed by keyword arguments as defined for `quick-check`."],"^;","~$clojure.test.check.clojure-test/defspec","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",18,"^1:",["^ ","^17",false,"^1;",3,"^18",3,"^13",["^X",[["^1<","^1="],["^1<","^1>","^1="]]],"^W",["^X",[["^1<","^1="],["^1<","^1>","^1="]]],"^16",["^X",[null,null]]],"^13",["^X",[["^1<","^1="],["^1<","^1>","^1="]]],"^15",null,"^1;",3,"^16",["^X",[null,null]],"^J",1,"^17",false,"~:methods",[["^ ","^1;",4,"^17",false,"^O",["^:",["~$seq","~$cljs.core/IList"]]],["^ ","^1;",5,"^17",false,"^O",["^:",["^1D","^1E"]]]],"^I",75,"^1?",true,"^K",75,"^18",3,"^19",false,"^W",["^X",[["^1<","^1="],["^1<","^1>","^1="]]],"^T","Defines a new clojure.test test var that uses `quick-check` to verify the\n  property, running num-times trials by default.  You can call the function defined as `name`\n  with no arguments to trigger this test directly (i.e., without starting a\n  wider clojure.test run).  If called with arguments, the first argument is the number of\n  trials, optionally followed by keyword arguments as defined for `quick-check`."],"~$*report-shrinking*",["^ ","^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",118,"^J",16,"^K",118,"^L",34,"^M",true],"^;","~$clojure.test.check.clojure-test/*report-shrinking*","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",34,"^J",1,"^M",true,"^I",118,"^K",118,"^O","~$boolean","^T","If true, a verbose report of the property being tested, the\n  failing return value, and the arguments provoking that failure is emitted\n  prior to the start of the shrinking search."],"~$*report-trials*",["^ ","^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",100,"^J",16,"^K",100,"^L",31,"^M",true],"^;","~$clojure.test.check.clojure-test/*report-trials*","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",31,"^J",1,"^M",true,"^I",100,"^K",100,"^O","^1H","^T","Controls whether property trials should be reported via clojure.test/report.\n  Valid values include:\n\n  * false - no reporting of trials (default)\n  * a function - will be passed a clojure.test/report-style map containing\n  :clojure.test.check/property and :clojure.test.check/trial slots\n  * true - provides quickcheck-style trial reporting (dots) via\n  `trial-report-dots`\n\n  (Note that all reporting requires running `quick-check` within the scope of a\n  clojure.test run (via `test-ns`, `test-all-vars`, etc.))\n\n  Reporting functions offered by clojure.test.check include `trial-report-dots` and\n  `trial-report-periodic` (which prints more verbose trial progress information\n  every `*trial-report-period*` milliseconds)."],"~$trial-report-dots",["^ ","^V",null,"^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",153,"^J",7,"^K",153,"^L",24,"^W",["^X",["^Y",["^X",[[["~#cmap",[["~$so-far","~$total"],"~:clojure.test.check.clojure-test/trial"]]]]]]],"^T","Intended to be bound as the value of `*report-trials*`; will emit a single\n  dot every 1000 trials reported."],"^;","~$clojure.test.check.clojure-test/trial-report-dots","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",24,"^13",["^X",[["~$p__4718"]]],"^15",null,"^16",["^X",[null,null]],"^J",1,"^17",false,"^I",153,"~:ret-tag","~$clj-nil","^K",153,"^18",1,"^19",true,"^W",["^X",["^Y",["^X",[[["^1L",[["^1M","^1N"],"^1O"]]]]]]],"^T","Intended to be bound as the value of `*report-trials*`; will emit a single\n  dot every 1000 trials reported."],"~$assert-check",["^ ","^V",null,"^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",18,"^J",7,"^K",18,"^L",19,"^W",["^X",["^Y",["^X",[[["^ ","^Z",["~$result","~$result-data"],"^10","~$m"]]]]]]],"^;","~$clojure.test.check.clojure-test/assert-check","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",19,"^13",["^X",[["~$p__4699"]]],"^15",null,"^16",["^X",[null,null]],"^J",1,"^17",false,"^I",18,"^K",18,"^18",1,"^19",true,"^W",["^X",["^Y",["^X",[[["^ ","^Z",["^1U","^1V"],"^10","~$m"]]]]]]],"~$*report-completion*",["^ ","^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",163,"^J",16,"^K",163,"^L",35,"^M",true],"^;","~$clojure.test.check.clojure-test/*report-completion*","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",35,"^J",1,"^M",true,"^I",163,"^K",163,"^O","^1H","^T","If true, completed tests report test-var, num-tests and seed. Failed tests\n  report shrunk results. Defaults to true."],"~$with-test-out*",["^ ","^V",null,"^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",134,"^J",7,"^K",134,"^L",21,"^W",["^X",["^Y",["^X",[["~$f"]]]]]],"^;","~$clojure.test.check.clojure-test/with-test-out*","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",21,"^13",["^X",[["~$f"]]],"^15",null,"^16",["^X",[null,null]],"^J",1,"^17",false,"^I",134,"^1R","~$any","^K",134,"^18",1,"^19",true,"^W",["^X",["^Y",["^X",[["~$f"]]]]]],"~$trial-report-periodic",["^ ","^V",null,"^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",138,"^J",7,"^K",138,"^L",28,"^W",["^X",["^Y",["^X",[["~$m"]]]]],"^T","Intended to be bound as the value of `*report-trials*`; will emit a verbose\n  status every `*trial-report-period*` milliseconds, like this one:\n\n  Passing trial 3286 / 5000 for (your-test-var-name-here) (:)"],"^;","~$clojure.test.check.clojure-test/trial-report-periodic","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",28,"^13",["^X",[["~$m"]]],"^15",null,"^16",["^X",[null,null]],"^J",1,"^17",false,"^I",138,"^1R",["^:",[null,"^21","^1S"]],"^K",138,"^18",1,"^19",true,"^W",["^X",["^Y",["^X",[["~$m"]]]]],"^T","Intended to be bound as the value of `*report-trials*`; will emit a verbose\n  status every `*trial-report-period*` milliseconds, like this one:\n\n  Passing trial 3286 / 5000 for (your-test-var-name-here) (:)"],"~$get-property-name",["^ ","^V",null,"^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",130,"^J",8,"^K",130,"^L",25,"~:private",true,"^W",["^X",["^Y",["^X",[[["^ ","~$property-fun","~:clojure.test.check.clojure-test/property","^10","~$report-map"]]]]]]],"^25",true,"^;","~$clojure.test.check.clojure-test/get-property-name","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",25,"^13",["^X",[["~$p__4715"]]],"^15",null,"^16",["^X",[null,null]],"^J",1,"^17",false,"^I",130,"^1R",["^:",["^21","~$string"]],"^K",130,"^18",1,"^19",true,"^W",["^X",["^Y",["^X",[[["^ ","^26","^27","^10","^28"]]]]]]],"~$*trial-report-period*",["^ ","^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",124,"^J",16,"^K",124,"^L",37,"^M",true],"^;","~$clojure.test.check.clojure-test/*trial-report-period*","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",37,"^J",1,"^M",true,"^I",124,"^K",124,"^O","^P","^T","Milliseconds between reports emitted by `trial-report-periodic`."],"~$process-options",["^ ","~:no-doc",true,"^V",null,"^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",64,"^J",7,"^K",64,"^L",22,"^W",["^X",["^Y",["^X",[["^1>"]]]]],"^2?",true],"^;","~$clojure.test.check.clojure-test/process-options","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",22,"^13",["^X",[["^1>"]]],"^15",null,"^16",["^X",[null,null]],"^J",1,"^17",false,"^I",64,"^1R",["^:",[null,"~$clj","^21","^1S"]],"^K",64,"^18",1,"^19",true,"^W",["^X",["^Y",["^X",[["^1>"]]]]]],"~$last-trial-report",["^ ","^G",["^ ","^H","C:\\Users\\nyemi\\Documents\\clojure\\workshop_activity\\hello-test\\out\\clojure\\test\\check\\clojure_test.cljc","^I",128,"^J",16,"^K",128,"^L",33,"^25",true],"^25",true,"^;","~$clojure.test.check.clojure-test/last-trial-report","^H","out\\clojure\\test\\check\\clojure_test.cljc","^L",33,"^J",1,"^I",128,"^K",128,"^O","~$cljs.core/Atom"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6","^>","^?","^?","^?"],"~:cljs.analyzer/constants",["^ ","~:seen",["^:",["~:clojure.test.check.clojure-test/params","~$&","~$quick-check-opts__4710__auto__","~$cljs.core/str","~:testing-vars","~:clojure.test.check.properties/error","^1O","~:shrunk","~:begin-test-var","~$clojure.test.check/quick-check","~:else","~:num-tests-total","~$cljs.core/apply","~$clojure.test.check.clojure-test/check?","~:property","^;","^10","~$times__4709__auto__","~$cljs.core/concat","~:num-tests","~$cljs.core/defn","~:type","^2@","~:clojure.test.check.clojure-test/complete","~$cljs.core/vary-meta","~:seed","~:bad-options","~$m","~$cljs.core/let","~$num-tests","~:clojure.test.check.clojure-test/defspec","~:fail","^Z","~$max-size","~:result","~:result-data","~:smallest","^27","~:expected","~$options__4708__auto__","~$cljs.core/fn","~$seed","~:cljs.test/default","~:reporter-fn","~:clojure.test.check.clojure-test/shrunk","~:clojure.test.check.clojure-test/shrinking","^1B","~:error","^1W","~$cljs.core/assoc","^Y","^W","~:actual","~:test-var","~:time-elapsed-ms","~:test","~$cljs.core/merge","~$reporter-fn","~:message"]],"~:order",["^38","^39","^2M","^2Z","^3;","^3E","^3K","^3C","^2T","~$m","^2L","^2X","^31","^3G","^3F","^;","^27","^2[","^2U","^1O","^2R","^2I","^3B","^36","^3A","^3:","^2N","^3@","^2Q","^32","^1B","^2Y","^35","^3H","^3=","^1W","^3D","^2K","^Y","^W","^34","~$&","^Z","^3>","^37","^3J","^33","^3<","^2@","^2S","^2W","^2V","^10","^2J","^3I","^2P","^30","^3?","^2O"]],"^T",null]